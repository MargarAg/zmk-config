/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
};

&mt {
    flavor = "tap-preferred";
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&none  &kp ESCAPE  &kp Q        &kp W       &kp E       &kp R         &kp T          &kp Y    &kp U         &kp I        &kp O       &kp P           &kp BACKSPACE  &none
       &kp TAB     &mt LCTRL A  &mt LALT S  &mt LGUI D  &mt LSHIFT F  &kp G          &kp H    &mt LSHIFT J  &mt LGUI K   &mt LALT L  &mt LCTRL SEMI  &kp SQT
       &kp LSHFT   &kp Z        &kp X       &kp C       &kp V         &kp B          &kp N    &kp M         &kp COMMA    &kp DOT     &kp FSLH        &kp LBKT
                                            &kp TAB     &kp LSHFT     &lt 4 SPACE    &kp RET  &lt 2 SPACE   &lt 1 SPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &trans  &kp N1        &kp N2  &kp N3  &kp N4  &kp N5    &kp N6        &kp N7        &kp N8      &kp N9         &kp N0             &trans           &none
       &trans  &kp CAPSLOCK  &trans  &trans  &trans  &trans    &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &trans             &kp C_VOLUME_UP
       &trans  &kp ESCAPE    &trans  &trans  &trans  &trans    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp LC(LG(SPACE))  &kp C_VOL_DN
                                     &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&none  &trans  &kp LS(N1)    &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)     &kp LS(N7)     &kp LS(N8)    &kp LS(N9)    &kp LS(N0)    &trans         &none
       &trans  &kp CAPSLOCK  &trans      &trans      &trans      &trans        &kp MINUS      &kp EQUAL      &kp LBKT      &kp RBKT      &kp BSLH      &kp GRAVE
       &trans  &kp ESC       &trans      &trans      &trans      &trans        &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(LBKT)  &kp LS(RBKT)  &kp LS(BSLH)  &kp LS(GRAVE)
                                         &trans      &trans      &trans        &trans         &trans         &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&none  &bootloader   &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &bootloader   &none
       &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &out OUT_TOG  &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &out OUT_TOG
                                                 &trans        &none         &trans          &trans        &none         &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans  &kp KP_EQUAL  &kp KP_PLUS   &kp N7  &kp N8  &kp N9    &trans  &trans  &trans  &out OUT_TOG  &bt BT_CLR   &bt BT_SEL 0  &trans
        &trans  &kp CAPSLOCK  &kp KP_MINUS  &kp N4  &kp N5  &kp N6    &trans  &trans  &trans  &trans        &sys_reset   &bt BT_SEL 1
        &trans  &kp ESC       &kp N0        &kp N1  &kp N2  &kp N3    &trans  &trans  &trans  &trans        &bootloader  &bt BT_SEL 2
                                            &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "number_layer";
        };
    };
};
